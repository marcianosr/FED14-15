// Push all to github
// Difference querySelector and getelementbyID | X
// WebWorkers implementation
// localStorage | /
// searchbar setTimeout func  | X
// searchbar search on any word | X
// searchbar show 'no results' when not found anything  | X
// searchbar search case insenstive | X


//detailpagina | X
// Swipe through actors | X
//modularity (uitzoeken)
//gruntJS


// toObject: function(array)
		// {
		// 	var newObj = {};
		// 	var count = 0;
		// 	this.forEach(array, function(el)
		// 	{	
			
		// 		newObj[count]= el;
		// 		count++;
		// 	})
		
		// 	return newObj;
		// }, 


var App = App || {}; 

(function(){ 

	App.content = 
	{
		movies:
		{
			
			average:function(movies)
			{	
				
				App.helpers.forEach(movies, function(movie)
				{
						
					 var reviews = movie['reviews'];

					 console.log(reviews)

					 //memo representeert de laatste waarde die teruggegeven wordt. De initieërende waarde is 0. 
					 var average = _.reduce(reviews, function(memo, review) { return memo + review.score / reviews.length }, 0); 
					

					 movie.average = average;

					 if(reviews.length == 0)
					 {
					 	movie.average = "N/A";
					 }


				});

			},

			input: document.getElementById("search"),
			noResults: 	document.getElementById("noResults"),
			timer: false,
			showSearchBar: false,
			noResultsMessage: 
			{
				message:''
			},
		

			results: [],

			search:function(movies)
			{
				var input = this.input; 
				console.log('Do I have to show the SB? ' + this.showSearchBar)
				

				
				var self = this;
				var timer; 



				input.addEventListener("focus", function()
				{
					//verander de 'this' omgeving

					self.timer = setInterval(self.checkForKeyUp.bind(self, input, movies), 2500);
				}); 

				input.addEventListener("blur", function()
				{
					console.log("clear")

					clearInterval(self.timer);
				});


			},


			checkForKeyUp: function(input, movies)
			{
				var self = this;
				this.results = []; 
				

	
				var filter = _.filter(movies, function(movie)
				{	
	
					if (input.value.length != 0)
					{
						var checkPattern = App.helpers.startsWith(movie.title, input.value);
						self.noResults.style.display = "none";


						if (checkPattern)
						{		
							//push the found movies
							self.results.push(movie);
							App.page.searchResult(self.results);	
							return true;
							
						}

					}

					if (input.value.length == 0)
					{
						self.noResults.style.display = "none";
						Transparency.render(document.getElementById("movies"), movies, App.controller.movieDirectives);
					}


				});


				if (input.value.length != 0)
				{
					//check of er wel iets is ingevuld zodra de search klaar is 
					if (filter.length == 0)
					{
						self.noResultsMessage.message = "Helaas, uw zoekopdracht '" + self.input.value + "' komt niet voor in onze database."
						self.noResults.style.display = "block";
						Transparency.render(self.noResults, self.noResultsMessage);
						
						return false;
		
					}


				}

			}
		}, 


		about:
		{
			title: "Movies: Al jouw films in één app",
			description: "Movies is een app gebouwd voor het vak Frontend II. Deze app dient als opstapje voor 'the next level'. Vanaf hier probeer ik verder te bouwen naar complexere apps met Javascript. Mijn leerdoelen zijn excelleren op Javascript met o.a NodeJS, MeteorJS, Angular en/of Backbone PhoneGap en Appcelerator."
		}
	}

	App.controller = 
	{

		init: function()
		{
			console.log("init");

			App.routes.init();
			App.UI.init();
	
		},

		url:"http://dennistel.nl/movies",

		movieDirectives: 
		{
			cover:
			{
				src:function(params)
				{
					return this.cover;
				},

				alt: function() 
				{	
					return this.title;
				}
			}, 


			genre: 
			{
				text: function()
				{
					return this.genres;
				
				}
			},

		
			
			directors: 
			{	
				name:function(params)
				{
					
					return "Director(s): " + this.name;

				}
			},

			movie_id: 
			{
				href: function(params)
				{

					return "#movie/" + App.helpers.prettifyUrl(this.title);
				}
			}, 

			actors:
            {
                url_photo:
                {
                    src: function()
                    {
                        return this.url_photo;
                    }
                },
              
                character:function()
                {

                	return this.character;
                }

            }

		}
		
	};

	App.section = 
	{ 

		toggle: function(route, id)
		{
			var sections = document.querySelectorAll("section");


			App.helpers.forEach(sections, function(section)
			{		
				if (section)
				{
					section.classList.remove("active");
				}

				if (section.getAttribute("data-route") === route)
				{
					console.log("show " + route + "!");
					section.classList.add("active");	
				}
				else if ( section.getAttribute("data-route") === '')
				{
					console.log("NO ROUTE");
				}
				


			});

			
			// this refereert aan het object. Daarin verwijs je met de route naar het huidige object binnen dit object (App.section)
			// is het ID niet bekend? Stuur dan alleen de route door. Als hij wel bekend is:

			(id == undefined) ? (this[route](), console.log("No ID")) : (this[route](id), console.log("ID: " + id));

			

			if ( !App.UI.menu.menuClosed )
			{
				console.log("Menu Status: " + App.UI.menu.menuClosed)
				
				App.UI.menu.menuUl.classList.add("closed");

			}

			

		},
		
		about:function()
		{
			
			App.page.about('about', App.content.about)

		
			console.log("About");

		},
		
		movies:function()
		{
			App.page.movies('movies', App.controller.url)
				
			console.log("Movies");
			
		},

		movie:function(id)
		{
			console.log('section movie id: '+ id);
			App.page.movie('movie', App.controller.url, id)
		}

	};

	App.page = 
	{
		loader: document.getElementById("noTrespassingOuterBarG"),
		about: function(route)
		{
			console.log(route);
			Transparency.render(document.getElementById(route), App.content.about);
		},

		movies: function(route, url)
		{

			var self = this;
			this.loader.style.display = "block";
			
		

				App.ajax.trigger('GET', url, route, function()
				{	
					//data from the succes callback
					var data = this; 
					console.log(data)
					// console.log("data : " + data.split(" "))
					App.content.showSearchBar = true;
					App.content.movies.search(data);

					
					self.loader.style.display = "none";
					Transparency.render(document.getElementById(route), data, App.controller.movieDirectives);
				});


			
		
	
			
		},

		movie:function(route, url, id)
		{
			var self = this;
			this.loader.style.display = "block";
			App.ajax.trigger('GET', url, route, function()
			{	
				//data from the succes callback
				var data = this;
				console.log(data)

				if ( App.storage.check(route) ) 
				{	

					// console.log("dont have to call the ajax anymore" + localStorage.getItem(route));
					// data = localStorage.getItem(route);
					// console.log(JSON.parse(data));

				}

				App.content.movies.average(data);
				

				var movieData = _.filter(data, function(movie)
				{
					return App.helpers.prettifyUrl(movie.title) == id; 
				}); 
				

				self.loader.style.display = "none";
				
				App.UI.swipeToNextPage.swipe(movieData);

		
				console.log(movieData)
				Transparency.render(document.getElementById(route), movieData, App.controller.movieDirectives);
			});
		}, 

		searchResult:function(data)
		{
			// data is the array with the search results
			 Transparency.render(document.getElementById("movies"), data, App.controller.movieDirectives);
		}
	}

	App.routes = 
	{
		init: function()
		{
			console.log("Route: init route");

				routie({

			    'about': function() 
			    {
			    	console.log("called about");
			    	App.section.toggle('about');
			   
			    },

			    'movies': function()
			    {
			    	console.log("on the movies");
			    	App.section.toggle('movies');
			    
			    },

			    'movie/:id': function(id)
			    {
			    	console.log("single movie " + id);
			    	App.section.toggle('movie', id);
	    
			    },

			    '*':function()
			    {
			    	App.section.toggle('movies');
			    }

			});
		}

	}



	App.helpers = 
	{
		forEach: function(el, action)
		{
			for( var i = 0; i < el.length; i++)
			{
				action(el[i]);
			}
		},


		prettifyUrl: function(string)
		{
			return string.split(" ").join("-");
		}, 

		startsWith:function(string, pattern)
		{
			//Old way:
			//return string.slice(0, pattern.length) == pattern;

			//Do not use search as indexOf is faster. Search is used for regexp, indexOf just for plain strings. 
			// console.log(string.search(pattern))

			if (string.toLowerCase().indexOf(pattern.toLowerCase()) != -1)
			{
				return true;
			}



		}
	}

	App.storage = 
	{
		check: function(route)
		{
			console.log('store ' + route); 
			if (localStorage.getItem(route) !== null)
			{
				console.log("localStorage: There is already someting stored")
				return true;
			}
			else 
			{
				console.log("localStorage: Hmmm... nothing stored!"); 
				return false;
			}

		},

		set: function(route, response)
		{
			localStorage.setItem(route, response);
		}

	}

	App.UI = 
	{
		init:function()
		{

			this.menu.animate(); 
		}, 

		swipeToNextPage: 
		{

			counter: 1,

			swipe:function(movies)
			{
				
				
				
				var self = this;


				var imgHolder = document.querySelector(".actors-container");
			
				// var ul = document.query('actors');
				var li = document.querySelector("li#actor"); 
				var liWidth = li.offsetWidth;
			
				 _.filter(movies, function(movie)
				{
						
					var scroller = new FTScroller(imgHolder, {
						
						scrollingY: false, 
						scrollingX: true,
					 
						contentWidth: movie.actors.length * (20 + liWidth)
					});

				});


		

				// App.helpers.forEach(routes, function(r)
				// {
			
				
					// var swipeGesture = new Hammer(page);

					// swipeGesture.on('swipeleft swiperight', function(e) 
					// {
					// 	console.log(e.target.style)
				
					// 	if ( e.direction == 2 && !self.counter == 0)
					// 	{
					// 		self.counter--;		

							
							
					// 		// App.animation.start('test2', 10000 , function()
					// 		// {
					// 		// 	App.animation.stopInterval("test2")

					// 		// 	console.log("uejijdasijd")
					// 		// })
		
						

						
				
					// 	}
					// 	else if (e.direction == 4 && self.counter == 0)
					// 	{
					// 		self.counter++;

					

					// 	}

					// 	console.log(window.location.hash)

						// if ( window.location.hash === "")
						// {
						// 	//No route
						// 	window.location.hash = routes[0];
						// }

						// 	//reset the location
						// 	window.location = window.location.hash.replace(currentRoute, routes[self.counter]);
			



					//});

				// });
				
			}, 

		},

		menu:
		{
			menuClosed:  true, 
			menuUl: document.getElementById("main"), 
			menuIcon: document.getElementById("burgerIcon"),

			animate:function()
			{
				

				var self = this;
				

				this.menuIcon.addEventListener("click", function()
				{
					console.log(self);
					if(self.menuUl.className === "closed") 
					{
						self.menuClosed = false;
						self.menuUl.classList.remove("closed");
						
					}
					else 
					{
						self.menuClosed = true; 
						self.menuUl.classList.add("closed");
						 
					}

				
				}); 
			}


		},


	},



	App.ajax = 
	{
		
		trigger: function (type, url, route, success)
		{
			//localStorage.clear();
			
			// App.storage.check(route);



			// console.log(App.storage.check(route))

			// if (App.storage.check(route))
			// {
			// 	// console.log(route + localStorage.getItem(route)); 
			// 	var localData = localStorage.getItem(route);

			// 	// console.log(localData)
			// 	// document.write(JSON.parse(localData));
				
			// 	 setLocalStorage(localData)
		
			// 	// success.call([{'title': 'test'}];

			// 	return;

			// }

	

			var req = new XMLHttpRequest;


			req.open(type, url, true);

			req.setRequestHeader('Content-type','application/json');

			type === 'POST' ? req.send(data) : req.send(null);

			req.onreadystatechange = function() 
			{
				if (req.readyState === 4) 
				{
					if (req.status === 200 || req.status === 201) 
					{
						//success(JSON.parse(req.response));

						//pass the given json response to the callback function ( succes ) with call
						success.call(JSON.parse(req.response));
						App.storage.set(route, req.response);
						// localStorage.setItem("movies", JSON.stringify(req.response));
	
					}
				}
			}

			
		}

	}



})();


